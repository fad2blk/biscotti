#summary Frequently anticipated questions
#labels Featured

=Introduction=

===Is this library safe to use?===

Not really. This project is in the pre-alpha stage of development. Although there is a download available, I would encourage you to thoroughly test any part of this library that you are planning to use in a production environment.

===What was your motivation for building all this?===

Having somewhat of a background in data mining, I have always been fascinated by _cute_ and _efficient_ data structures.  I have been playing around with various third party collections libraries for Java since the days of Objectspace JGL. This library has been influenced by [http://recursionsw.com/Products/jgl.html JGL], [http://commons.apache.org/collections/ Apache Commons Collections], [http://trove.starlight-systems.com/ GNU Trove], and of course the [http://code.google.com/p/google-collections/ Google Collections], and the [http://download.oracle.com/javase/6/docs/technotes/guides/collections/index.html Java Collections Framework].

I designed this library from the ground up to have a well formed interface hierarchy matching (and in some cases improving on) that of the JDK. Further more this project faithfully adheres to the conventions set forth by the JDK and to a lesser extent by the Google Collections.

= Design =

===Why so much emphasis on sorted collections?===

This library isn't just a rehash of what is already out there. For the most part sorted data structures have generally been missing from most collections libraries, and not only for Java. For example I would be very interested to see any implementation of the [http://download.oracle.com/javase/6/docs/api/java/util/List.html List] interface which maintains the elements in sorted order, let alone provides fast random insertion and removal operations.

===Why do you need a sorted list? A [http://google-collections.googlecode.com/svn/trunk/javadoc/index.html?com/google/common/collect/TreeMultiset.html TreeMultiset] is already provided in the Google Collections.===

I've been asked this question several times. The idea that a `Multiset` (or `Bag`) can be substituted for a `List` is a misnomer. Without getting into mathematical abstractions, it is suffice to say that a `List` is the only data structure that provides explicit control over the order of the elements. For example you can explicitly query for the element located in the `i`_th_ position.

Incidentally a similar question was asked under one of the issues in the Google Collections regarding the implementation of a `UniqueList` (a list the rejects duplicate elements) versus a `SortedSet`.

===If you build on Java 6 and try to match the interface hierarchy of the JDK, why do you have a [http://biscotti.googlecode.com/svn/trunk/javadoc/index.html?com/googlecode/biscotti/collect/SortedList.html SortedList] and not a `NavigableList` with methods analogous to `NavigableSet`?===

Good catch. Simply put the `SortedList` interface was more than enough to demonstrate a concrete [http://biscotti.googlecode.com/svn/trunk/javadoc/index.html?com/googlecode/biscotti/collect/TreeList.html TreeList] implementation. In the future I plan to create the `NavigableList` interface and extend `TreeList` to implement it.